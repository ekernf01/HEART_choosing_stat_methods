# Setup
set.seed(0)
regression_demo = data.frame(
x1 = sample(rep(1:10, times = 5)), # the sample() function puts things in a random order.
x2 = sample(rep(1:10, times = 5)),
x3 = sample(rep(1:10, times = 5))
)
# Let's add some randomness, maybe from measurement error or unobserved parts of the system we're studying.
# This function makes random variables with a mean of 0.
make_noise = function(n = nrow(regression_demo)) rbinom(n, 10, 0.5)
# In truth, y depends strongly on x1, weakly on x2, and not at all on x3.
regression_demo[["y"]] = regression_demo[["x1"]]*1.1 + regression_demo[["x2"]]*0.1 + make_noise()
plot(regression_demo$x1, regression_demo$y, main = "Y depends strongly on x1")
plot(regression_demo$x2, regression_demo$y, main = "Y depends weakly on x2")
plot(regression_demo$x3, regression_demo$y, main = "Y is independent of x3")
# Q1
# TODO: run this 10,000 times and check how many times x1, x2, and x3 are included.
# We can use built-in functions to fit a model that estimates how strongly y depends on x1, x2, x3.
model_complex = lm(y ~ 1 + x1 + x2 + x3, data = regression_demo)
# It guesses y =    -1.28887   +   1.18901*x1   +   0.08631*x2  +   0.04992*x3 .
model_complex
# We can compare its predictions against the actual y.
plot(regression_demo$y, predict(model_complex), main = "Model predictions versus actual y")
# Using built-in functions, R can test the null hypothesis that each coefficient is 0.
# If you include a term in the model whenever the test yields a p-value below 0.1, then
# you should control false positive rate. Any variable not actually used -- here, x3
# is not used -- will only be included 10% of the time.
null_hypothesis_test_results = summary(model_complex)
null_hypothesis_test_results
#' Generate allele counts with simulated assortative mating.
#'
#' This function follows a "mixture model" where there's two possibilities. Each locus can be either:
#' - so strongly affected by assortative mating that the two alleles are identical
#' - not affected at all, so the alleles are independent.
#' The chance for the first outcome is the input strength_of_assortative_mating.
#'
generateAlleleCounts = function(allele_frequency, strength_of_assortative_mating, n){
# Check user input -- should be numbers from 0 to 1
stopifnot(is.numeric(allele_frequency))
stopifnot(is.numeric(strength_of_assortative_mating))
stopifnot("strength_of_assortative_mating must be between 0 and 1" = allele_frequency < 0)
stopifnot("strength_of_assortative_mating must be between 0 and 1" = allele_frequency > 1)
stopifnot("Allele frequency must be between 0 and 1" = allele_frequency < 0)
stopifnot("Allele frequency must be between 0 and 1" = allele_frequency > 1)
extreme_assortative_mating = 2*rbinom(size = 1, prob = allele_frequency, n=n)
no_assortative_mating = rbinom(size = 2, prob = allele_frequency, n=n)
ifelse(rbinom(size = 1, prob = strength_of_assortative_mating, n),
extreme_assortative_mating,
no_assortative_mating)
}
#' This function uses the Law of Total Variance to compute the variance of the outcomes from the above mixture model.
#'
#' Law of Total Variance: https://en.wikipedia.org/wiki/Law_of_total_variance
computeVariance = function(allele_frequency, strength_of_assortative_mating){
# Check user input -- should be numbers from 0 to 1
stopifnot(is.numeric(allele_frequency))
stopifnot(is.numeric(strength_of_assortative_mating))
stopifnot("strength_of_assortative_mating must be between 0 and 1" = allele_frequency < 0)
stopifnot("strength_of_assortative_mating must be between 0 and 1" = allele_frequency > 1)
stopifnot("Allele frequency must be between 0 and 1" = allele_frequency < 0)
stopifnot("Allele frequency must be between 0 and 1" = allele_frequency > 1)
variance_if_independent = 2*allele_frequency*(1-allele_frequency)
variance_if_identical = 4*allele_frequency*(1-allele_frequency)
total_variance = strength_of_assortative_mating * variance_if_identical + (1-strength_of_assortative_mating)*variance_if_independent
}
computeVariance(0.5, 0.5)
computeVariance(0.5, 0.5)
var(generateAlleleCounts(0.5, 0.5, 10000))
#' Generate allele counts with simulated assortative mating.
#'
#' This function follows a "mixture model" where there's two possibilities. Each locus can be either:
#' - so strongly affected by assortative mating that the two alleles are identical
#' - not affected at all, so the alleles are independent.
#' The chance for the first outcome is the input strength_of_assortative_mating.
#'
generateAlleleCounts = function(allele_frequency, strength_of_assortative_mating, n){
# Check user input -- should be numbers from 0 to 1
stopifnot(is.numeric(allele_frequency))
stopifnot(is.numeric(strength_of_assortative_mating))
stopifnot("strength_of_assortative_mating must be between 0 and 1" = allele_frequency > 0)
stopifnot("strength_of_assortative_mating must be between 0 and 1" = allele_frequency < 1)
stopifnot("Allele frequency must be between 0 and 1" = allele_frequency > 0)
stopifnot("Allele frequency must be between 0 and 1" = allele_frequency < 1)
extreme_assortative_mating = 2*rbinom(size = 1, prob = allele_frequency, n=n)
no_assortative_mating = rbinom(size = 2, prob = allele_frequency, n=n)
ifelse(rbinom(size = 1, prob = strength_of_assortative_mating, n),
extreme_assortative_mating,
no_assortative_mating)
}
#' This function uses the Law of Total Variance to compute the variance of the outcomes from the above mixture model.
#'
#' Law of Total Variance: https://en.wikipedia.org/wiki/Law_of_total_variance
computeVariance = function(allele_frequency, strength_of_assortative_mating){
# Check user input -- should be numbers from 0 to 1
stopifnot(is.numeric(allele_frequency))
stopifnot(is.numeric(strength_of_assortative_mating))
stopifnot("strength_of_assortative_mating must be between 0 and 1" = allele_frequency > 0)
stopifnot("strength_of_assortative_mating must be between 0 and 1" = allele_frequency < 1)
stopifnot("Allele frequency must be between 0 and 1" = allele_frequency > 0)
stopifnot("Allele frequency must be between 0 and 1" = allele_frequency < 1)
variance_if_independent = 2*allele_frequency*(1-allele_frequency)
variance_if_identical = 4*allele_frequency*(1-allele_frequency)
total_variance = strength_of_assortative_mating * variance_if_identical + (1-strength_of_assortative_mating)*variance_if_independent
}
computeVariance(0.5, 0.5)
var(generateAlleleCounts(0.5, 0.5, 10000))
computeVariance(0.5, 0.5)
#' This function uses the Law of Total Variance to compute the variance of the outcomes from the above mixture model.
#'
#' Law of Total Variance: https://en.wikipedia.org/wiki/Law_of_total_variance
computeVariance = function(allele_frequency, strength_of_assortative_mating){
# Check user input -- should be numbers from 0 to 1
stopifnot(is.numeric(allele_frequency))
stopifnot(is.numeric(strength_of_assortative_mating))
stopifnot("strength_of_assortative_mating must be between 0 and 1" = allele_frequency > 0)
stopifnot("strength_of_assortative_mating must be between 0 and 1" = allele_frequency < 1)
stopifnot("Allele frequency must be between 0 and 1" = allele_frequency > 0)
stopifnot("Allele frequency must be between 0 and 1" = allele_frequency < 1)
variance_if_independent = 2*allele_frequency*(1-allele_frequency)
variance_if_identical = 4*allele_frequency*(1-allele_frequency)
strength_of_assortative_mating * variance_if_identical + (1-strength_of_assortative_mating)*variance_if_independent
}
computeVariance(0.5, 0.5)
var(generateAlleleCounts(0.5, 0.5, 10000))
var(generateAlleleCounts(0.3, 0.3, 10000))
computeVariance(0.3, 0.3)
var(generateAlleleCounts(0.3, 0.3, 10000))
var(generateAlleleCounts(0.5, 0.5, 100000))
computeVariance(0.3, 0.3)
var(generateAlleleCounts(0.3, 0.3, 100000))
computeVariance(0.3, 0)
var(generateAlleleCounts(0.3, 0, 100000))
var(generateAlleleCounts(0.3, 1, 100000))
computeVariance(0.3, 1)
var(generateAlleleCounts(0.3, 1, 100000))
# Check the math. These should all be roughly the same.
{
computeVariance(0.5, 0.5)
var(generateAlleleCounts(0.5, 0.5, 100000))
computeVariance(0.3, 0.3)
var(generateAlleleCounts(0.3, 0.3, 100000))
computeVariance(0.3, 0)
var(generateAlleleCounts(0.3, 0, 100000))
computeVariance(0.3, 1)
var(generateAlleleCounts(0.3, 1, 100000))
}
# Check the math. These should all be roughly the same.
computeVariance(0.5, 0.5)
var(generateAlleleCounts(0.5, 0.5, 100000))
computeVariance(0.3, 0.3)
var(generateAlleleCounts(0.3, 0.3, 100000))
computeVariance(0.3, 0)
var(generateAlleleCounts(0.3, 0, 100000))
computeVariance(0.3, 1)
var(generateAlleleCounts(0.3, 1, 100000))
generateAlleleCounts(0.5, 0, 1000)
sapply( (1:9)/10, function(af) generateAlleleCounts(af, 0, 1000) )
sapply( (1:9)/10, function(af) generateAlleleCounts(af, 0, 1000) ) %>% as.data.frame %>% head
library("magrittr")
sapply( (1:9)/10, function(af) generateAlleleCounts(af, 0, 1000) ) %>% as.data.frame %>% head
sapply( (1:9)/10, function(af) generateAlleleCounts(af, 0, 1000) ) %>%
as.data.frame %>%
set_colnames(paste0("Locus", 1:9))
sapply( (1:9)/10, function(af) generateAlleleCounts(af, 0, 1000) ) %>%
as.data.frame %>%
set_colnames(paste0("Locus", 1:9)) %>%
head
sample(paste0("demo", 1:2))
filenames = sample(paste0("demo", 1:2, ".csv"))
# How I generated the data for the last question
set.seed(42)
# How I generated the data for the last question
set.seed(03081992)
library("magrittr")
filenames = sample(paste0("demo", 1:2, ".csv"))
sapply( (1:9)/10, function(af) generateAlleleCounts(af, 0, 1000) ) %>%
as.data.frame %>%
set_colnames(paste0("Locus", 1:9)) %>%
write.csv(filenames[[1]])
sapply( (1:9)/10, function(af) generateAlleleCounts(af, 0.5, 1000) ) %>%
as.data.frame %>%
set_colnames(paste0("Locus", 1:9)) %>%
write.csv(filenames[[2]])
getwd()
filenames
setwd("../4_mistaken_assumptions/")
# How I generated the data for the last question
library("magrittr")
filenames = paste0("demo", 1:9, ".csv")
for(f in filenames){
am = sample(c(0, 0.3), 1)
sapply( (1:9)/10, function(af) generateAlleleCounts(af, am, 1000) ) %>%
as.data.frame %>%
set_colnames(paste0("Locus", 1:9)) %>%
write.csv(f)
}
am
